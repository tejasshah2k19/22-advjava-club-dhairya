servlet --> servlet-api.jar 

to create servlet we need to follow three steps 

1) extends HttpServlet
2) override service method 
3) map your servlet in web.xml 




get --> query string 
post --> enc hidden 



task : 
	create Signup.html -> 
				submit --> servlet --> servlet will fetch and print all information on console /  browser 
----------------------------------------------------
		
		
XXX@XXX.XXX


t@gmail.com
1
1
4
1
[2/3]  
	
9 char 


if(email.length() >= 9 &&  email.contains("@") && email.contains(".") ){

}else{
	invalid
}


-------------------------------------------------------------------
jsp -> java server pages / java servlet pages 


jsp --> html + java 


scriptlet -> <%  %> --> write any java code 
expression -> <%= %> -> print any java variable 



-------------------------------------------------------------------------


bank login.jsp  -->black listed ip 
whatsapp --> x image send y user --> 25m b 
			x -> image --> compress -->10 mb  w.server --> y 
	

filter -> pre process the request 

1) class implements Filter 
2) override methods - logic 
3) mapping your filter into web.xml 



Calc.jsp --> num1 num2 --> submi    CalcFilter [validation] | CalcServlet --> addition 



-------------------------------------------------------------------------

certificate :-


name   xx

faculty  yy 

year    2022 

subject   adv java 

punc   5

gras   5

regu   4

prac   4

task   4


	submit 
	
	
	generate certificate 
	
	
	
-------------------------------------------------------------------------
1) driver
2) jdbc api / java.sql 
	
	
mysql --> mysql connector 	
	


create database mydb;
use mydb;
create table users (
	userId integer primary key auto_increment,
	firstName varchar(30),
	email varchar(30),
	password varchar(30)
);
-------------------------------------------------------------------------


user information :-	
		1)	cookie  -- client side -- browser side  
		2)	session -- server side -- server's memory 
		
		
		otp,password,creditcard,cvv --- 



session:-
	session will create when user make first request to the server 
	session is not created by us it will created by server automatically. 
	we can ask for session to the server using method. 
	once we got the session we can use it. 

	session scope is available to all the pages in the webapplication
	every user will get their own session. 
	
	all the jsp will get session object automatically you can use directly. 
	like request object 
	
	
how to destroy session:- 
	session use server's memory so when user don't want to use it , 
	we need to destroy it. 
	 
	we can destroy session using method or configuration. 
	1) session.invalidate()  [ logout ] 
	2) using session time out config in web.xml 
		<session-config>
			<session-timeout>10</session-timeout>
		</session-config>


-------------------------------------------------------

PMIT 

signup
	email firstname password city 
login 

suggestion ? 
ahmedabad sola road pav bhaji ? 




answers ? 
shivam 
arpit 
aanand 

-------------------------------------------------------

servlet life cycle :- 

		LoginServlet.java --> LoginServlet.class 
server :- 
		load class[1]
		create instance[1] 
		init[1]
		service[N]
		destroy[shutdown][1]   



JSP -->java server pages | java servlet pages 

	your jsp is nothing but it's a servlet 
	
	
		translation  :  .jsp -> .java 
		compilation	 :	.java -> .class 
		load class[1]
		create instance[1] 
		init[1]
		service[N]
		destroy[shutdown][1]   
	
A.jsp  --> A.java 
	<% int x; %>  
	<%! int y; %> 	
	<%=x%> 
	
	<%!   
		void add(){
		
		}
	%>	
	
	
	
	A {
	
		int y; 
		
		_jspService(req,res){
			Hi 
			int x; 
		}
 
		void add(){
		
		}
	}
 _ -> override 







----------------------------------------------------------

Header
	A C B D E F 


HEADER
	xyz 
	
	
HEADER
	def 
	
HEADER
	klp 
	

	inclusion
	1)	static - <%@include file="InclusionHeader.jsp" %>
	2)	dynamic - 	<jsp:include page="InclusionHeader.jsp"></jsp:include>
	
-------------------------------------

i need one application in which 1 page is public [ login ] and 
3 pages are private [ home,order,product].

private pages means user will logged in and then they can access this private pages. 

in my app there is only 1 user who access the app. 

where to store correct email and password ? 

ans : 
	we can store correct email and password in web.xml , inside LoginServlet 
	
	we can read that data using,
		 servletConfig.getInitParameter("email")
		 servletConfig.getInitParameter("password")



question : 
	In previous example we store correct email and password for LoginServlet,
	LoginServlet only can read email and password , no other servlet can access that. 
	how can we store data globally in web.xml so all servlet can acccess. 

ans: 
	we use servletContext, that is available in entire application 
	
	in web.xml 
	
	<context-param>
		<param-name>email</param-name>
		<param-value>admin@gmail.com</param-value>
	</context-param>
	
	we can access this information using servletContext object. 
	e.g 
	
		in service method 
		
			ServletContext context = getServletContext(); 
			String email = context.getInitParameter("email"); 
	
	
	SerletContext object can be access on jsp , 
	it is accessible on jsp with name application. 
	
	we have 4 scope in j2ee to store data.
	1) page  [ available to current page]
	2) request [ can transfer from 1 page to another page ] 
	3) session [ can have in all the pages but user specific ] 
	4) application [ can have in all the pages and single object we have so all are share this ] 
	 
	
	
		
-------------------------------------
	how we can track user on website? 
	e.g : 1)how amazon knows behind the browser who is logged in so when user says add to cart than that 
		  product is added in correct user's cart? 
		   
	ans: using session 
			when any user hit amazon , amazon server will create session for that user.	
			
			e.g 
					tejas open amazon - amazon server will create session for tejas and store unique id of that session in
							tejas's browser 
							
					dhairya open amazon - amazon server will create session for dhairya and store unique id of that session 
							in dhairya's browser 
							
							
				So now tejas ask for any thing like , add to cart 
							tejas's request is submit to the amazon's server with that unique session id 
							so server get the idea who is behind the request using that unique session id 
							
	question: 
			as we know  that server will create session for us and store unique id in browser , so in browser 
				where it will store ?
	ans :	it is inside the cookies, so server will store unique session id inside cookie 
				with name JSESSIONID 
				so cookie name is JSESSIONID which has unique session id  
				
	
	question : how to read cookies of browser in servlet ? 
	
	
	
				
-------------------------------------

how to create cookie ?
	to deal with cookie we have Cookie class 
how to add new cookie in browser? 

how to read all the cookies from browser? 



pract: 

		create 1 jsp that ask email and firstName to the user
		once user submit our server will store that information in cookie. 
	
		jsp -> AddCookie.jsp 
		servlet -> AddCookieServlet.java 
				
		service()
		
			String email = request.getParameter();
			String firstName = // 
			
			Cookie c = new Cookie("email",email);
			Cookie d = new Cookie("firstName",firstName); 
			
			response.addCookie(c);
			response.addCookie(d);  

			response.sendRedirect("Home.jsp"); 
			
	now on Home.jsp add link for ViewAllCookie.jsp 
	we will print all cookies in this jsp. 
	
	in ViewAllCookie.jsp 
	
	
	<%   Cookie c [] = request.getCookies();  %> 
		
			<%=c.getName()%> =>  <%=c.getValue()%><br> 
	
	<%}%> 
			
-------------------------------------


JSTL 
	
	HTML <a> <b> <i> 
java standard tag library :-	
<% int a;  %> 

<%=a%> 


<% for %>

<% if %> 


core** 
format
sql 
xml 



1) jstl.jar [ tomcat will not ] 
2) web-inf/lib
3) java buildpath 
4) jsp => import => use 


-------------------------------------
custom tag 
	- user 
	- developer 
	
	
	1) simple tag 
		[tag with no body no attribute ]  <greet></greet>
		[tag witn no body with attribute ] <sqr num="2"></sqr>
	2) classic tag 
		[tag with no body no attribute ]  <greet></greet>
		[tag witn no body with attribute ] <sqr num="2"></sqr>
		[tag with body - attribute* ] 


steps to implement this :
1) tag handler class -- logic 
2) tag lib descriptor -- .tld [ greet , time , .. ]  
3) map .tld -> web.xml 
4) use -jsp -> import tld 

GreetTag -> SimpleTag

add jar -> jsp-api.jar 





	
	













